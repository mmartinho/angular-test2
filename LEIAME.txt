**************************************************
AVA: cursos.alura.com.br
Formação: Angular (Nova Formação de Maio/2021)
Curso: Angular: Avançando com testes automatizados
Data Início: 17/08/2021
**************************************************

Capítulo 01: Novo componente, nova complexidade

1. Baixamos, descompactamos e instalamos o projeto disponibilizado em: 
        @see https://codeload.github.com/alura-cursos/ng-test2/zip/833376983b080185530ec627ced462937c90e0f5
2. Criamos um novo componente "photo-frame" e seu respectivo módulo, exportando-o:
        >ng generate module shared/components/photo-frame
        >ng generate component shared/components/photo-frame
3. Como o componente "photo-frame" irá utilizar o componente "like-widget", então, precisamos importar seu módulo 
   para o módulo do photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.module.ts
4. Por enquanto, vamos utilizar o "photo-frame" no componente principal da aplicação, então, precisamos importar
   seu módulo no módulo principal da aplicação:
        @see src\app\app.module.ts
5. Modificamos o componente "photo-frame" para suportar o padrão de projeto "debounce":
        @see src\app\shared\components\photo-frame\photo-frame.component.ts

Capítulo 02: Testes temporais e de integração com o DOM
#fakeAsyncZone, #tick, #funcionalTest, #DomIntegrationTest, #accessibilityTest, #attributesTest

1. Adicionamos mais um it() ao teste do componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o like() aguarda 500ms antes de registrar outro like;
2. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o próximo like() é considerado após aguardar os 500ms;
3. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o incremento do like é mostrado na página;
4. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se incremento do like é lido pelo leitor de tela (screen reader);
5. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o like é inicialmente 0 para o leitor de tela (screen reader);
6. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar uma imagem com uma descrição é mostrada;

Capítulo 03: Lidando com eventos de UI
#clickSimulation, #UIEventEmmission, #TestingDirectives

1. Adicionamos mais um it() ao teste de componente like-widget:
        @see src\app\shared\components\like-widget\like-widget.component.spec.ts
   Esse it() tem como objetivo testar o click do DOM no widget;
2. Adicionamos mais um it() ao teste de componente like-widget:
        @see src\app\shared\components\like-widget\like-widget.component.spec.ts
   Esse it() tem como objetivo testar o pressionamento da tecla ENTER no widget;
3. Criamos uma diretiva para carpturar os eventos do "click do mouse" e da tecla "Enter",
   usando-a no template do "like-widget":
        @see src\app\shared\directives\action
        @see src\app\shared\components\like-widget\like-widget.component.html
4. Criamos uma especificação de testes para a diretiva criada anteriormente:
        @see src\app\shared\directives\action\action.directive.spec.ts

Capítulo 04: Cuidados com a abstração do Angular
#ngOnChangesTest, #simpleChanges

1. Criamos o módulo e componente "photo-board":
        >ng generate module shared/components/photo-board
        >ng generate component shared/components/photo-board
   ...representando a lista composta por componentes "photo-frame". Lembrando que o "photo-frame" é
   uma composição do componente "like-widget"
2. Criamos uma interface do "photo-board" para a API de uma photo:
        >ng generate interface shared/components/photo-board/interfaces/photo
3. Criamos um serviço do "photo-board" para acessar a API para trazer as photos:
        >ng generate service shared/components/photo-board/services/photo-board
        @see src\app\shared\components\photo-board\services\photo-board.service.ts
   ...declarando um provedor de serviço no módulo do "photo-board". Dessa forma, quem importar o 
   módulo do "photo-board" já terá acesso ao serviço;
4. Importamos o módulo do "photo-board" no módulo principal da aplicação:
        @see src\app\app.module.ts
   Dessa forma, poderemos usá-lo no "app-component" (componente principal da aplicação). E é o que
   fizemos em:
        @see src\app\app.component.html
        @see src\app\app.component.ts
5. Finalmente, definimos o teste do "photo-board", cujo arcabouço já havia sido criado junto com o 
   "ng generate" executado no tópico "1":
        @see src\app\shared\components\photo-board\photo-board.component.spec.ts

Capítulo 05: Avançando nos testes
#SpyOnMocakup, #HttpTestingControllerClass

1. Criamos um componente (não compartilhado) tipo escopo de página:
        >ng generate module components/photo-list
        >ng generate component components/photo-list
        @see src\app\components\photo-list
   Ele vai depender do "photo-board", então, importamos o módulo deste no módulo do "photo-list".
   E este componente vai ser usado pela aplicação em algum momento (@see "3"), então, precisa está 
   no "export" do seu módulo;
2. Passamos toda a lógica que estava no componente principal da aplicação para o "photo-list":
        @see src\app\components\photo-list\photo-list.component.ts
        @see src\app\components\photo-list\photo-list.component.html
   ...removendo tudo o que é desnecessário no módulo do componente principal da aplicação:
        @see src\app\app.module.ts
   ...adicionando o componente que "recebe" as páginas componentes da aplicação (router-outlet) 
   no template do componente principal:     
        @see src\app\app.component.html
   E, claro, devemos definir a configuração de rota no módulo da aplicação para esta finalidade:
        @see src\app\app-routing.module.ts
3. E, para que a aplicação possa achar o componente "photo-list", seu respectivo módulo deve estar
   na lista de importação do módulo principal da aplicação:
        @see src\app\app.module.ts
4. Criamos uma função para gerar uma lista de fotos em um arquivo fonte separado e exportada:
        @see src\app\shared\components\photo-board\test\build-photo-list.ts
   ...importando-a em:
        @see src\app\shared\components\photo-board\photo-board.component.spec.ts
   ...usando-a também na nova descrição de teste:
        @see src\app\components\photo-list\photo-list.component.spec.ts
   O uso da função "spyOn()" nessa abordagem NÃO testa a REQUISIÇÃO da API. Ao invés disso, ela
   força o retorno de um objeto criado previamente (@see src\app\shared\components\photo-board\test\
   build-photo-list.ts), na própria sequencia do teste;
5. Para realizar realmente a REQUISIÇÃO, sem "mockar" o retorno da API, utilizamos a classe 
   "HttpTestingController":
        @see src\app\shared\components\photo-board\services\photo-board.service.spec.ts
