**************************************************
AVA: cursos.alura.com.br
Formação: Angular (Nova Formação de Maio/2021)
Curso: Angular: Avançando com testes automatizados
Data Início: 17/08/2021
**************************************************

Capítulo 01: Novo componente, nova complexidade

1. Baixamos, descompactamos e instalamos o projeto disponibilizado em: 
        @see https://codeload.github.com/alura-cursos/ng-test2/zip/833376983b080185530ec627ced462937c90e0f5
2. Criamos um novo componente "photo-frame" e seu respectivo módulo, exportando-o:
        >ng generate module shared/components/photo-frame
        >ng generate component shared/components/photo-frame
3. Como o componente "photo-frame" irá utilizar o componente "like-widget", então, precisamos importar seu módulo 
   para o módulo do photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.module.ts
4. Por enquanto, vamos utilizar o "photo-frame" no componente principal da aplicação, então, precisamos importar
   seu módulo no módulo principal da aplicação:
        @see src\app\app.module.ts
5. Modificamos o componente "photo-frame" para suportar o padrão de projeto "debounce":
        @see src\app\shared\components\photo-frame\photo-frame.component.ts

Capítulo 02: Testes temporais e de integração com o DOM
#fakeAsyncZone, #tick, #funcionalTest, #DomIntegrationTest, #accessibilityTest, #attributesTest

1. Adicionamos mais um it() ao teste do componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o like() aguarda 500ms antes de registrar outro like;
2. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o próximo like() é considerado após aguardar os 500ms;
3. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o incremento do like é mostrado na página;
4. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se incremento do like é lido pelo leitor de tela (screen reader);
5. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar se o like é inicialmente 0 para o leitor de tela (screen reader);
6. Adicionamos mais um it() ao teste de componente photo-frame:
        @see src\app\shared\components\photo-frame\photo-frame.component.spec.ts
   Esse it() tem como objetivo testar uma imagem com uma descrição é mostrada;

Capítulo 03: Lidando com eventos de UI
#clickSimulation, #UIEventEmmission, #TestingDirectives

1. Adicionamos mais um it() ao teste de componente like-widget:
        @see src\app\shared\components\like-widget\like-widget.component.spec.ts
   Esse it() tem como objetivo testar o click do DOM no widget;
2. Adicionamos mais um it() ao teste de componente like-widget:
        @see src\app\shared\components\like-widget\like-widget.component.spec.ts
   Esse it() tem como objetivo testar o pressionamento da tecla ENTER no widget;
3. Criamos uma diretiva para carpturar os eventos do "click do mouse" e da tecla "Enter",
   usando-a no template do "like-widget":
        @see src\app\shared\directives\action
        @see src\app\shared\components\like-widget\like-widget.component.html
4. Criamos uma especificação de testes para a diretiva criada anteriormente:
        @see src\app\shared\directives\action\action.directive.spec.ts

Capítulo 04: Cuidados com a abstração do Angular

1. 